/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cryptanalysis;

import javax.swing.JOptionPane;

/**
 *
 * @author Akoh Aladiada Rosemary
 */
public class CryptAnalysisJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CryptAnalysisJFraame
     */
    public CryptAnalysisJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedCryptAnalysis = new javax.swing.JTabbedPane();
        javax.swing.JPanel jPanelVigenereAttack = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        JPlaintextAttack = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        JCiphertextAttack = new javax.swing.JTextArea();
        JKeyAttack = new javax.swing.JTextField();
        javax.swing.JButton jVigenereAttackDecrypt = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        JKeyLengthAttack = new javax.swing.JTextField();
        jPanelVigenereCipher = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        JPlaintext = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        JCiphertext = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        JKey = new javax.swing.JTextField();
        JEncryptButton = new javax.swing.JButton();
        JDecryptButton = new javax.swing.JButton();
        JClear = new javax.swing.JButton();
        jPanelColumnarTrans = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jCipherTextTrans = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jPlainTextTrans = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jKeyTrans = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jColumnarTransEncrypt = new javax.swing.JButton();
        jColumnarTransDecrypt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptography Tool");
        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(1050, 800));
        setResizable(false);

        jTabbedCryptAnalysis.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedCryptAnalysis.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedCryptAnalysis.setForeground(new java.awt.Color(0, 102, 102));
        jTabbedCryptAnalysis.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedCryptAnalysis.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedCryptAnalysis.setToolTipText("");
        jTabbedCryptAnalysis.setAutoscrolls(true);
        jTabbedCryptAnalysis.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTabbedCryptAnalysis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedCryptAnalysisFocusGained(evt);
            }
        });

        jPanelVigenereAttack.setBackground(new java.awt.Color(204, 204, 204));
        jPanelVigenereAttack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelVigenereAttack.setPreferredSize(new java.awt.Dimension(900, 1000));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("PLAIN TEXT");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("CIPHER TEXT");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("KEY");

        JPlaintextAttack.setEditable(false);
        JPlaintextAttack.setColumns(20);
        JPlaintextAttack.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        JPlaintextAttack.setRows(5);
        JPlaintextAttack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        JPlaintextAttack.setDisabledTextColor(new java.awt.Color(0, 153, 153));
        jScrollPane3.setViewportView(JPlaintextAttack);

        JCiphertextAttack.setColumns(20);
        JCiphertextAttack.setRows(5);
        jScrollPane4.setViewportView(JCiphertextAttack);

        JKeyAttack.setEditable(false);
        JKeyAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JKeyAttackActionPerformed(evt);
            }
        });
        JKeyAttack.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                JKeyAttackFocusLost(evt);
            }
        });

        jVigenereAttackDecrypt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jVigenereAttackDecrypt.setForeground(new java.awt.Color(0, 102, 102));
        jVigenereAttackDecrypt.setText("DECRYPT");
        jVigenereAttackDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jVigenereAttackDecryptActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("CLEAR MESSAGES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("KEY LENGTH (PERIOD)");

        JKeyLengthAttack.setEditable(false);
        JKeyLengthAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JKeyLengthAttackActionPerformed(evt);
            }
        });
        JKeyLengthAttack.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                JKeyLengthAttackFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelVigenereAttackLayout = new javax.swing.GroupLayout(jPanelVigenereAttack);
        jPanelVigenereAttack.setLayout(jPanelVigenereAttackLayout);
        jPanelVigenereAttackLayout.setHorizontalGroup(
            jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVigenereAttackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVigenereAttackLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVigenereAttackLayout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanelVigenereAttackLayout.createSequentialGroup()
                            .addComponent(JKeyAttack)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(JKeyLengthAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelVigenereAttackLayout.createSequentialGroup()
                            .addComponent(jVigenereAttackDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanelVigenereAttackLayout.setVerticalGroup(
            jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVigenereAttackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jVigenereAttackDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVigenereAttackLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanelVigenereAttackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JKeyAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JKeyLengthAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(127, 127, 127))
        );

        jTabbedCryptAnalysis.addTab("Vigenere Cipher Attack", null, jPanelVigenereAttack, "");

        jPanelVigenereCipher.setBackground(new java.awt.Color(204, 204, 204));
        jPanelVigenereCipher.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelVigenereCipher.setPreferredSize(new java.awt.Dimension(900, 1000));
        jPanelVigenereCipher.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jPanelVigenereCipherComponentAdded(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("PLAIN TEXT");

        JPlaintext.setColumns(20);
        JPlaintext.setRows(5);
        jScrollPane5.setViewportView(JPlaintext);

        JCiphertext.setColumns(20);
        JCiphertext.setRows(5);
        jScrollPane6.setViewportView(JCiphertext);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("KEY");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 102));
        jLabel8.setText("CIPHER TEXT");

        JKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JKeyActionPerformed(evt);
            }
        });
        JKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                JKeyFocusLost(evt);
            }
        });

        JEncryptButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        JEncryptButton.setForeground(new java.awt.Color(0, 102, 102));
        JEncryptButton.setText("ENCRYPT");
        JEncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JEncryptButtonActionPerformed(evt);
            }
        });

        JDecryptButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        JDecryptButton.setForeground(new java.awt.Color(0, 102, 102));
        JDecryptButton.setText("DECRYPT");
        JDecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDecryptButtonActionPerformed(evt);
            }
        });

        JClear.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        JClear.setForeground(new java.awt.Color(255, 0, 0));
        JClear.setText("CLEAR ");
        JClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelVigenereCipherLayout = new javax.swing.GroupLayout(jPanelVigenereCipher);
        jPanelVigenereCipher.setLayout(jPanelVigenereCipherLayout);
        jPanelVigenereCipherLayout.setHorizontalGroup(
            jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVigenereCipherLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVigenereCipherLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(JKey)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(JClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JDecryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                    .addComponent(JEncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelVigenereCipherLayout.setVerticalGroup(
            jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVigenereCipherLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JKey, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JClear, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVigenereCipherLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelVigenereCipherLayout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(JEncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVigenereCipherLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVigenereCipherLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanelVigenereCipherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVigenereCipherLayout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(JDecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 147, Short.MAX_VALUE))
        );

        jTabbedCryptAnalysis.addTab("Vigenere Cipher ", jPanelVigenereCipher);

        jPanelColumnarTrans.setBackground(new java.awt.Color(204, 204, 204));
        jPanelColumnarTrans.setPreferredSize(new java.awt.Dimension(900, 1000));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("CIPHER TEXT");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("PLAINTEXT");

        jCipherTextTrans.setColumns(20);
        jCipherTextTrans.setRows(5);
        jScrollPane2.setViewportView(jCipherTextTrans);

        jPlainTextTrans.setColumns(20);
        jPlainTextTrans.setForeground(new java.awt.Color(51, 0, 51));
        jPlainTextTrans.setRows(5);
        jPlainTextTrans.setSelectionColor(new java.awt.Color(102, 153, 255));
        jScrollPane8.setViewportView(jPlainTextTrans);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 102));
        jLabel11.setText("KEY");

        jKeyTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jKeyTransActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 51, 51));
        jButton2.setText("CLEAR MESSAGES");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jColumnarTransEncrypt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jColumnarTransEncrypt.setForeground(new java.awt.Color(0, 102, 102));
        jColumnarTransEncrypt.setText("ENCRYPT");
        jColumnarTransEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jColumnarTransEncryptActionPerformed(evt);
            }
        });

        jColumnarTransDecrypt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jColumnarTransDecrypt.setForeground(new java.awt.Color(0, 102, 102));
        jColumnarTransDecrypt.setText("DECRYPT");
        jColumnarTransDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jColumnarTransDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelColumnarTransLayout = new javax.swing.GroupLayout(jPanelColumnarTrans);
        jPanelColumnarTrans.setLayout(jPanelColumnarTransLayout);
        jPanelColumnarTransLayout.setHorizontalGroup(
            jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                            .addComponent(jKeyTrans))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jColumnarTransEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jColumnarTransDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addGap(338, 338, 338)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelColumnarTransLayout.setVerticalGroup(
            jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelColumnarTransLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addComponent(jKeyTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                        .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelColumnarTransLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelColumnarTransLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jColumnarTransEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)))
                        .addGroup(jPanelColumnarTransLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jColumnarTransDecrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelColumnarTransLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(264, 264, 264)))))
                .addGap(119, 119, 119))
        );

        jTabbedCryptAnalysis.addTab("Transposition Cipher", jPanelColumnarTrans);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedCryptAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 1039, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedCryptAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jTabbedCryptAnalysis.getAccessibleContext().setAccessibleName("jTabbedPaneCryptAnalysis");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedCryptAnalysisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedCryptAnalysisFocusGained

    }//GEN-LAST:event_jTabbedCryptAnalysisFocusGained
 
    private void jVigenereAttackDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVigenereAttackDecryptActionPerformed
        // Get input text from User
        String cipherText = JCiphertextAttack.getText();
        /*Call the ReplaceCipherText Function from CryptAnalysis Project 
        to filter out numbers and special characters*/
        int length = cipherText.length();
        // Display error message if cipher text area is blank
        if("".equals(cipherText))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Cipher Text to Decrypt, [a-zA-Z]");
            JCiphertextAttack.requestFocus();
            return;
        }
        if (length < 400)
        {
           JOptionPane.showMessageDialog(this, "Length of text is too short!\n"
                                                 + "Minimum of 400 Characters\n"
                                                 + "is required for a high success rate!");
           return;
        }
        if (!CrpytAnalysisProject.isAlphabet(cipherText))
         {
            JOptionPane.showMessageDialog(this, "Cipher Text can only contain letters of the alphabet!");
            return;
         }
        // Call functions from CrpytAnalysisProject to perform Attack on Ciphertext
        // Find Key Length or period uisng the user input cipher text
        int keyLength = CrpytAnalysisProject.keyLength(cipherText);
        // Find the Key using the cipherText and key length or period
        String key = CrpytAnalysisProject.key(cipherText, keyLength);
        // Find the Plain text message using the potential key and user input cipherText
        String plaintext = CrpytAnalysisProject.VigenereDecrypt(cipherText, key);
        // Display results
        JKeyLengthAttack.setText(Integer.toString(keyLength));
        JKeyAttack.setText(key.toUpperCase());
        JPlaintextAttack.setText(plaintext.toUpperCase());
    }//GEN-LAST:event_jVigenereAttackDecryptActionPerformed

    private void JKeyAttackFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JKeyAttackFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_JKeyAttackFocusLost

    private void JKeyAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JKeyAttackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JKeyAttackActionPerformed

    private void JEncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JEncryptButtonActionPerformed
        int dialogButton = 0;
        String plaintext = JPlaintext.getText();
        String key = JKey.getText();
        // Display error message if plaintext area is blank
        if ("".equals(plaintext))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Plain Text to Encrypt, [a-zA-Z]");
            return;
        }
         // Display error message if key field is blank
        if ("".equals(key)) 
        {
            JOptionPane.showMessageDialog(this, "Please Enter Key to Encrypt, [a-zA-Z]");
            return;
        }
         if (!CrpytAnalysisProject.isAlphabet(key))
         {
            JOptionPane.showMessageDialog(this, "Key can only contain letters of the alphabet!");
            return;
         }
          if (!CrpytAnalysisProject.isAlphabet(plaintext))
          {  
            dialogButton = JOptionPane.showConfirmDialog (null, "Plain Text can only contain "
                    + "letters of the alphabet!\nYou can get "
                    + "Unsupported characters removed by clicking "
                    + "yes to continue","WARNING", dialogButton);
            if (dialogButton == JOptionPane.YES_OPTION) 
            {
              /*Call the replaceText Function from CryptAnalysis Project 
              to filter out numbers and special characters*/
             plaintext = CrpytAnalysisProject.replaceText(plaintext);
             key = CrpytAnalysisProject.replaceText(key);
             JCiphertext.setText(CrpytAnalysisProject.VigenereEncrypt(plaintext, key));
            } else 
            {
                this.dispose();
            }
           }
          else
          {
             JCiphertext.setText(CrpytAnalysisProject.VigenereEncrypt(plaintext, key));
          }
        
    }//GEN-LAST:event_JEncryptButtonActionPerformed

    private void JKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JKeyActionPerformed

    private void JDecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDecryptButtonActionPerformed
        // TODO add your handling code here:
        String cipherText = JCiphertext.getText();
        String key = JKey.getText();
        // Display an error message to guard against Key or Ciphertext message being blank
        if("".equals(cipherText))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Cipher Text to Decrypt, [a-zA-Z]");
            return;
        }
         if("".equals(key))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Key to Decrypt, [a-zA-Z] ");
            return;
        }
        // Check to see if key characters other than letters of the alphabet
        if(!CrpytAnalysisProject.isAlphabet(key))
        {
            JKey.setText("");
            JOptionPane.showMessageDialog(this, "Key can only contain letters of the alphabet! [a-zA-Z]");
            return;    
        }
        /*Call the ReplaceCipherText Function from CryptAnalysis Project 
        to filter out numbers and special characters*/
        cipherText = CrpytAnalysisProject.replaceText(cipherText);
        key = CrpytAnalysisProject.replaceText(key);
        JPlaintext.setText(CrpytAnalysisProject.VigenereDecrypt(cipherText, key));
    }//GEN-LAST:event_JDecryptButtonActionPerformed

    private void JClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JClearActionPerformed
    
     JCiphertext.setText("");
     JPlaintext.setText("");
     JKey.setText("");
    }//GEN-LAST:event_JClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     JCiphertextAttack.setText("");
     JPlaintextAttack.setText("");
     JKeyAttack.setText("");
     JKeyLengthAttack.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void JKeyLengthAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JKeyLengthAttackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JKeyLengthAttackActionPerformed

    private void JKeyLengthAttackFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JKeyLengthAttackFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_JKeyLengthAttackFocusLost

    private void JKeyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JKeyFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_JKeyFocusLost

    private void jPanelVigenereCipherComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jPanelVigenereCipherComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanelVigenereCipherComponentAdded

    private void jColumnarTransDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jColumnarTransDecryptActionPerformed

        String cipherText = jCipherTextTrans.getText();
        String key = jKeyTrans.getText().toLowerCase();
         for (int i = 0; i < key.length(); i++)
         { 
            for (int j = i; j < key.length(); j++)
            {
            if(key.charAt(i) == key.charAt(j) && i != j)
            {
                JOptionPane.showMessageDialog(this, "Key cannot contain repeated letters, please try again");
                return;
            }
        }
       }
        // Display error message if cipherText area is blank
        if ("".equals(cipherText))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Cipher Text to Decrypt, [a-zA-Z]");
            return;
        }
        // Display error message if key field is blank
        if ("".equals(key))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Key to Decrypt, [a-zA-Z]");
            return;
        }
        if (!CrpytAnalysisProject.isAlphabet(key))
        {
            JKey.setText("");
            JOptionPane.showMessageDialog(this, "Key can only contain letters of the alphabet! [a-zA-Z]");
            return;
        }

        jPlainTextTrans.setText(CrpytAnalysisProject.columnarDecrypt(cipherText, key));

    }//GEN-LAST:event_jColumnarTransDecryptActionPerformed

    private void jColumnarTransEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jColumnarTransEncryptActionPerformed
        int dialogButton = 0;
        String plaintext = jPlainTextTrans.getText();
        String key = jKeyTrans.getText().toUpperCase();
        for (int i = 0; i < key.length(); i++)
         { 
            for (int j = i; j < key.length(); j++)
            {
            if(key.charAt(i) == key.charAt(j) && i != j)
            {
                JOptionPane.showMessageDialog(this, "Key cannot contain repeated letters, please try again");
                return;
            }
        }
       }
           // Display error message if plaintext area is blank
        if (key.length() > plaintext.length())
        {
            JOptionPane.showMessageDialog(this, "Key Length cannot be greater than Plaintext Length!\n Please try again");
            return;
        }
        // Display error message if plaintext area is blank
        if ("".equals(plaintext))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Plain Text to Encrypt, [a-zA-Z]");
            return;
        }
        // Display error message if key field is blank
        if ("".equals(key))
        {
            JOptionPane.showMessageDialog(this, "Please Enter Key to Encrypt, [a-zA-Z]");
            return;
        }
        if (!CrpytAnalysisProject.isAlphabet(key))
        {
            JKey.setText("");
            JOptionPane.showMessageDialog(this, "Key can only contain letters of the alphabet! [a-zA-Z]");
            return;
        }

        if (!CrpytAnalysisProject.isAlphabet(plaintext))
        {
            dialogButton = JOptionPane.showConfirmDialog (null, "Plain Text can only contain "
                + "letters of the alphabet!\nYou can get "
                + "Unsupported characters removed by clicking "
                + "yes to continue","WARNING", dialogButton);
            if (dialogButton == JOptionPane.YES_OPTION)
            {
                plaintext = CrpytAnalysisProject.replaceText(plaintext);
                key = CrpytAnalysisProject.replaceText(key);
                jCipherTextTrans.setText(CrpytAnalysisProject.columnarEncrypt(plaintext, key));
            }
            else
            {
                this.dispose();
            }
        }
        else
        {
            jCipherTextTrans.setText(CrpytAnalysisProject.columnarEncrypt(plaintext, key));
        }
    }//GEN-LAST:event_jColumnarTransEncryptActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jCipherTextTrans.setText("");
        jPlainTextTrans.setText("");
        jKeyTrans.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jKeyTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jKeyTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jKeyTransActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CryptAnalysisJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CryptAnalysisJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CryptAnalysisJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CryptAnalysisJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptAnalysisJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea JCiphertext;
    private javax.swing.JTextArea JCiphertextAttack;
    private javax.swing.JButton JClear;
    private javax.swing.JButton JDecryptButton;
    private javax.swing.JButton JEncryptButton;
    private javax.swing.JTextField JKey;
    private javax.swing.JTextField JKeyAttack;
    private javax.swing.JTextField JKeyLengthAttack;
    private javax.swing.JTextArea JPlaintext;
    private javax.swing.JTextArea JPlaintextAttack;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextArea jCipherTextTrans;
    private javax.swing.JButton jColumnarTransDecrypt;
    private javax.swing.JButton jColumnarTransEncrypt;
    private javax.swing.JTextField jKeyTrans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelColumnarTrans;
    private javax.swing.JPanel jPanelVigenereCipher;
    private javax.swing.JTextArea jPlainTextTrans;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedCryptAnalysis;
    // End of variables declaration//GEN-END:variables
}
